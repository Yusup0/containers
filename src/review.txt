Общие замечания:

1) Make
1.1) Выполнение clean перед каждым вызовом test - вообще это ошибка. 
Я вообще до этого обычно не докапываюсь, т.к. проблем и в коде хватает, но видел,
как это делают другие ревьюеры. 

В чем проблема: шаблонные классы очень долго компилируются, в том числе и STL. 
Для STL можно использовать precompiled headers, что ускоряет компиляцию очень 
(Но это для общего развития, к текущей проблеме отношения не имеет).

Лично меня эта долгая компиляция тестов бы постоянно раздражала. Поэтому, 
во-первых, не надо делать clean, чтобы все уже скомпилированные o-файлы 
сохранялись в папке. Во-вторых, make должен быть грамотно сделан, чтобы он не 
пытался перекомпилировать те файлы, которые не менялись.

Если ничего в исходниках не изменилось, то повторная компиляция в грамотно 
сделанном make выведет сообщение "make: `test' is up to date." - т.е. ничего 
делать не надо. 

Если я поменяю что-то в одном .cc файле тестов, то пересборка проекта скомпилирует
только этот один файл, а остальное трогать не будет и использует уже 
скомпилированные .o файлы.

Вообще это относится ко всем проектам, даже маленьким, просто тут это прям
раздражает, потому что долго собирается всё, если каждый раз полная пересборка. 

Плюс, например, на интре, это было в чеклисте, если ты второй раз вызываешь сборку,
ничего не поменяв, и вместо "is up to date" начинается сборка - это ошибка

На контейнерах, правда, гораздо сложнее идеально выстроить зависимости, из-за 
использования h-файлов, но тоже возможно.

Альтернатива - использовать cmake, он за вас многие проблемы решит.

1.2) В моем понимании не надо добавлять флаги покрытия при генерации цели test.
Не ошибка, но лишние действия. Флаги нужны только при генерации цели gcov_report.
Ошибкой было бы либу всегда собирать с флагами покрытия, но в этом проекте либу
мы не собираем

2) gcov_report
2.1) В отчете дофига лишнего, зачем вам показывать покрытие "c++/10.3.0", "gtest"
и т.д. - в общем сторонних либ? Мало того, что это бессмысленно, так еще и 
покрытие у них красное - тригерит на то, что есть проблемы с покрытием
2.2) Внимательно посмотрите отчет, встречаются методы, которые вообще не покрыты.
Например:
void list<T>::remove_if(Predicate pred)
typename list<T>::size_type list<T>::max_size()
MapIterator &operator=(const MapIterator &other)
и т.д.

Чеклист требует, чтобы каждый метод был покрыт. Процент не уточняется, но 0% -
точно ошибка, большинство ориентируются или на 80% (как было раньше) или на 100% 
(так как в задании написано "полное покрытие")
2.3) Вроде с исключениями у вас всё ок (но перепроверьте), но если будете
добавлять новые исключения после ревью, то учтите, что в чеклисте написано, 
что каждое исключение должно быть проверено соответствующим тестом

3) Напоминаю, что в рамках код ревью оценивается в том числе наличие комментариев
А их нет вообще, неужели прям ничего не хотелось прокомментировать?

4) Что-то тесты у вас странные, почему не сравниваете с std?
И зачем пишите using namespace s21, а потом все равно пишите s21::list

5) Если что, методы, которые не надо было делать по заданию, типа resise() или
remove_if() в листе, я просматривал по диагонали, так как не разбирался в нюансах 
их работы, и сейчас этим заниматься не очень хочется

6) Место, где лежат тест - странная, неочевидно где тесты искать